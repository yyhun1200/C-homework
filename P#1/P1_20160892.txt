문제 정의: 	1.사용자에게 숫자 입력 받기
		2.사용자에게 문자 입력 받기
		3.입력받은 숫자의 유효성 판단하기(일반연산: 0 <= a, b <= 1000, 확장연산: 0 <= a,b,c <= 1000)
		4.사용자에게 입력 받는 문자 연산자를 실제 연산가능한 연산자로 바꾸기
		5.0으로 나누는 경우 확인하고 오류처리하기
		6.사칙 연산 순서에 따른 연산 순서 구현하기

구현 방법:	1.int형 크기 만큼의 큰 숫자가 필요하지 않으므로 short형 자료 선언, scanf함수와 서식문자 %hd를 통해 숫자 입력을 구현하였습니다.
		2.문자형인 char형을 통한 연산자 입력 scanf와 서식문자 %c를 사용한 문자 입력하여 구현하였습니다.
		  scanf("%c, %c", &O1, &O2); 로 작성할시 O2에 문자가 저장되지 않는 현상을 발견하였고 
		  scanf(" %c, %c", &O1, &O2);처럼 앞에 공백을 줌으로써 해결하였습니다.
		3.숫자의 유효성 판단을 위해 사용자에게 숫자를 입력받은 뒤 if문을 작성하였습니다. 
		  여러 논리를 작성하기 위한 논리 연산자 || 사용하여 구현하였습니다.
		4.사용자에게 입력받은 문자인 연산자는 실제 연산자로 사용할 수 없으므로, if.. else if.. else를 통해 각각의 연산자 별로 조건문을 작성하여
		  케이스를 나누어 처리하였습니다.
		5.일반 연산 시에는 O1과 b의 값을 논리 연산자로 비교하여 O1 == '/'인 상황과 b == 0인 상황을 &&로 조건을 판단하였습니다.
		  확장 연산시에는 각 연산자와 바로 뒤의 변수를 비교하여 /와 0이 함께 나오는 경우를 조건문으로 작성하고 오류로 처리하였습니다.
		6.확장 연산시 사칙연산에 따른 연산순위의 조정이 필요한 경우를 O2에 *, /가 올경우로 생각하였습니다. 연산순위를 조정해야할 경우를 
		  if(O2 == '*' || O2 =='/')로 나누고 b O2 c의 연산을 하고 그 결과를 a와 연산하는 방식으로 우선순위를 조정하였습니다.